{"version":3,"sources":["components/header/index.js","components/header/header.js","services/swapi-services.js","components/spinner/index.js","components/spinner/spinner.js","components/error-indicator/error-indicator.js","components/error-indicator/index.js","components/random-planet/random-planet.js","components/random-planet/index.js","services/dummy-swapi-service.js","components/item-details/item-details.js","components/item-details/index.js","components/hoc-helpers/with-data.js","components/swapi-service-context/swapi-service-context.js","components/hoc-helpers/with-swapi-service.js","components/hoc-helpers/compose.js","components/hoc-helpers/with-child-function.js","components/sw-components/person-details.js","components/sw-components/planet-details.js","components/sw-components/starship-details.js","components/item-list/item-list.js","components/item-list/index.js","components/sw-components/item-lists.js","components/row/index.js","components/row/row.js","components/pages/people-page.js","components/pages/planets-page.js","components/pages/starships-page.js","components/pages/login-page.js","components/pages/secret-page.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","components/app/index.js","components/app/app.js","index.js"],"names":["Header","onServiceChange","className","to","onClick","SwapiService","_apiBase","_imageBase","getAllPeople","a","getResource","res","results","map","_transformPerson","getPersone","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","getPersonImage","getStarshipImage","getPlanetImage","_extractId","item","url","match","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","gender","birthYear","birth_year","eyeColor","eye_color","fetch","this","ok","Error","status","json","Spinner","ErrorIndicator","RandomPlanet","swapiService","state","loading","error","onPlanetLoaded","setState","onError","updatePlanet","Math","floor","random","then","catch","updateInterval","props","interval","setInterval","clearInterval","hasData","errorMessage","spinner","content","Component","defaultProps","PlanetView","Fragment","src","alt","DummySwapiService","_people","_planets","_starships","Record","field","label","ItemDetails","image","updateItem","prevProps","itemId","getData","getImageUrl","children","React","Children","child","cloneElement","select","SelectPerson","PeopleView","withData","View","data","update","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","withSwapiService","mapMethodsToProps","Wrapped","serviceProps","compose","funcs","comp","reduceRight","wrapped","f","withChildFunction","fn","ItemList","onItemSelected","renderLabel","items","key","renderName","PersonList","PlanetList","StarshipList","Row","left","right","withRouter","history","params","newPath","push","PlanetsPage","selectedItem","LoginPage","isLoggedIn","onLogin","SecretPage","ErrorBoundry","hasError","App","Service","console","log","value","path","render","exact","component","PeoplePage","StarshipsPage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a138155f.chunk.js","sourcesContent":["import Header from './header';\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './header.css';\n\nconst Header = ({ onServiceChange }) => {\n  return (\n    <div className=\"header d-flex\">\n      <h3>\n        <Link to=\"/\">\n          Star DB\n        </Link>\n      </h3>\n      <ul className=\"d-flex\">\n        <li>\n          <Link to=\"/people/\">People</Link>\n        </li>\n        <li>\n        <Link to=\"/planets/\">Planets</Link>\n        </li>\n        <li>\n        <Link to=\"/starships/\">Starships</Link>\n        </li>\n        <li>\n        <Link to=\"/login\">Login</Link>\n        </li>\n        <li>\n        <Link to=\"/secret\">Secret</Link>\n        </li>\n      </ul>\n      <button\n          onClick={onServiceChange}\n          className=\"btn btn-primary btn-sm\">\n        Change Service\n      </button>\n    </div>\n  );\n};\n\nexport default Header;","export default class SwapiService {\n\n  _apiBase = 'https://swapi.dev/api';\n  _imageBase = 'https://starwars-visualguide.com/assets/img';\n\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}${url}`);\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` +\n        `,received ${res.status}`)\n    }\n    return await res.json();\n  }\n\n  getAllPeople = async () => {\n    const res = await this.getResource(`/people/`)\n    return res.results.map(this._transformPerson);\n\n  }\n\n  getPersone = async (id) => {\n    const person = await this.getResource(`/people/${id}/`)\n    return this._transformPerson(person);\n  }\n\n  getAllPlanets = async () => {\n    const res = await this.getResource(`/planets/`)\n    return res.results.map(this._transformPlanet);\n\n  }\n\n  getPlanet = async (id) => {\n    const planet = await this.getResource(`/planets/${id}/`)\n    return this._transformPlanet(planet)\n  }\n\n  getAllStarships = async () => {\n    const res = await this.getResource(`/starships/`)\n    return res.results.map(this._transformStarship);\n\n  }\n\n  getStarship = async (id) => {\n    const starship = await this.getResource(`/starships/${id}/`)\n    return this._transformStarship(starship);\n  }\n\n  getPersonImage = ({id}) => {\n    return `${this._imageBase}/characters/${id}.jpg`\n  };\n\n  getStarshipImage = ({id}) => {\n    return `${this._imageBase}/starships/${id}.jpg`\n  };\n\n  getPlanetImage = ({id}) => {\n    return `${this._imageBase}/planets/${id}.jpg`\n  };\n\n  _extractId = (item) => {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n\n  _transformPlanet = (planet) => {\n    return {\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    }\n  }\n\n  _transformStarship = (starship) => {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.cost_in_credits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargoCapacity\n    }\n  }\n\n  _transformPerson = (person) => {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birth_year,\n      eyeColor: person.eye_color\n    }\n  }\n}\n\n\n\n  // fetch('https://swapi.dev/api/people/1')\n  //   .then((res) => {\n  //     return res.json();\n  //   })\n  //   .then((body) => {\n  //     console.log(body);\n  //   })","import Spinner from './spinner';\n\nexport default Spinner;","import React from 'react';\n\nimport './spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className=\"lds-css\">\n      <div className=\"lds-double-ring\">\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;","import React from 'react';\n\nimport './error-indicator.css';\n// import icon from './death-star.png';\n\nconst ErrorIndicator = () => {\n  return (\n    <div className=\"error-indicator\">\n      {/* <img src={icon} alt=\"error icon\"/> */}\n      <span className=\"boom\">BOOM!</span>\n      <span>\n        something has gone terribly wrong\n      </span>\n      <span>\n        (but we already sent droids to fix it)\n      </span>\n    </div>\n  );\n};\n\nexport default ErrorIndicator;","import ErrorIndicator from './error-indicator';\n\nexport default ErrorIndicator;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './random-planet.css';\n\nimport SwapiService from '../../services/swapi-services';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\n\nexport default class RandomPlanet extends Component {\n\n  static defaultProps = {\n    updateInterval: 10000,\n  } \n\n  static propTypes ={\n    updateInterval: PropTypes.number,\n  }\n\n  swapiService = new SwapiService();\n\n  state = {\n    planet: {},\n    loading: true,\n    error: false,\n  }\n\n  // constructor() {\n  //   super();\n  //   this.updatePlanet();\n  //   setInterval(this.updatePlanet, 1500);\n  // }\n\n  componentDidMount() {\n    const { updateInterval } = this.props\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, updateInterval);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  onPlanetLoaded = (planet) => {\n    this.setState({\n      planet,\n      loading: false,\n    })\n  }\n\n  onError = () => {\n    this.setState({\n      error: true,\n      loading: false,\n    })\n  }\n\n  updatePlanet = () => {\n    const id = Math.floor(Math.random() * 25) + 3;\n    this.swapiService.getPlanet(id)\n      .then(this.onPlanetLoaded)\n      .catch(this.onError)\n  }\n\n  render() {\n\n    const { planet, loading, error } = this.state;\n    const hasData = !(loading || error);\n    const errorMessage = error ? <ErrorIndicator /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = hasData ? <PlanetView planet={planet} /> : null;\n\n    return (\n      <div className=\"random-planet jumbotron rounded\">\n        {errorMessage}\n        {spinner}\n        {content}\n      </div>\n\n    );\n  }\n}\n\nconst PlanetView = ({ planet }) => {\n\n  const { id, name, population, rotationPeriod, diameter } = planet;\n\n  return (\n    <React.Fragment>\n      <img className=\"planet-image\"\n        src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} \n        alt=\"planet\" />\n      <div>\n        <h4>{name}</h4>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            <span className=\"term\">Population</span>\n            <span>{population}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Rotation Period</span>\n            <span>{rotationPeriod}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Diameter</span>\n            <span>{diameter}</span>\n          </li>\n        </ul>\n      </div>\n    </React.Fragment>\n  )\n}","  \nimport RandomPlanet from './random-planet';\n\nexport default RandomPlanet;","export default class DummySwapiService {\n\n    _people = [\n      {\n        id: 1,\n        name: 'Bilbo Baggins [TEST DATA]',\n        gender: 'male',\n        birthYear: 'long ago',\n        eyeColor: 'dark brown'\n      },\n  \n      {\n        id: 2,\n        name: 'Frodo Baggins [TEST DATA]',\n        gender: 'male',\n        birthYear: 'long ago',\n        eyeColor: 'dark brown'\n      }\n    ];\n  \n    _planets = [\n      {\n        id: 1,\n        name: 'Earth [TEST DATA]',\n        population: '7.530.000.000',\n        rotationPeriod: '23 hours 56 seconds',\n        diameter: '12.742 km'\n      },\n      {\n        id: 2,\n        name: 'Venus [TEST DATA]',\n        population: 'not known',\n        rotationPeriod: '243 days',\n        diameter: '12.104 km'\n      }\n    ];\n  \n    _starships = [\n      {\n        id: 1,\n        name: 'USS Enterprise [TEST DATA]',\n        model: 'NCC-1701-C',\n        manufacturer: 'Northrop Grumman Shipbuilding',\n        costInCredits: 'not known',\n        length: 'approx 300 meters',\n        crew: 1000,\n        passengers: 50,\n        cargoCapacity: 100\n      }\n    ];\n  \n    getAllPeople = async () => {\n      return this._people;\n    };\n  \n    getPersone = async () => {\n      return this._people[0];\n    };\n  \n    getAllPlanets = async () => {\n      return this._planets;\n    };\n  \n    getPlanet = async () => {\n      return this._planets[0]\n    };\n  \n    getAllStarships = async () => {\n      return this._starships;\n    };\n  \n    getStarship = async () => {\n      return this._starships[0];\n    };\n  \n    getPersonImage = () => {\n      return `https://placeimg.com/400/500/people`\n    };\n  \n    getStarshipImage = () => {\n      return `https://placeimg.com/600/400/tech`;\n    };\n  \n    getPlanetImage = () => {\n      return `https://placeimg.com/400/400/nature`\n    };\n  }","import React, { Component } from 'react';\n\nimport './item-details.css';\nimport SwapiService from '../../services/swapi-services';\nimport Spinner from '../spinner';\n\nconst Record = ({ item, field, label }) => {\n  return (\n    <li className=\"list-group-item\">\n      <span className=\"term\">{label}</span>\n      <span>{item[field]}</span>\n    </li>\n  );\n};\n\nexport { Record };\n\nexport default class ItemDetails extends Component {\n\n  swapiService = new SwapiService();\n\n  state = {\n    item: null,\n    loading: false,\n    image: null\n  }\n\n  componentDidMount() {\n    this.updateItem();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.itemId !== prevProps.itemId || \n      this.props.getData !== prevProps.getData ||\n      this.props.getImageUrl !== prevProps.getImageUrl) {\n      this.updateItem()\n    }\n  }\n\n  updateItem() {\n    const { itemId, getData, getImageUrl } = this.props;\n\n    if (!itemId) {\n      return;\n    }\n\n    this.setState({\n      loading: true\n    })\n\n    getData(itemId)\n      .then(item => {\n        this.setState({\n          item,\n          loading: false,\n          image: getImageUrl(item)\n        })\n      })\n  }\n\n  render() {\n\n    const { item, loading, image } = this.state\n    const children = React.Children.map(this.props.children, (child) => {\n      return React.cloneElement(child, { item });\n    }); \n\n    const select = (!item && !loading) ? <SelectPerson /> : null\n    const spinner = loading ? <Spinner /> : null;\n    const content = (item && !loading) ? <PeopleView item={item} image={image} children={children} /> : null;\n\n    return (\n      <div className=\"item-details card\">\n        {select}\n        {spinner}\n        {content}\n      </div>\n    )\n  }\n}\n\nconst SelectPerson = () => {\n  return <span>Select a person from a list</span>\n}\n\nconst PeopleView = ({ item, image, children }) => {\n\n  const { name } = item;\n\n  return (\n    <React.Fragment>\n      <img className=\"item-image\"\n        src={image}\n        alt=\"character\" />\n\n      <div className=\"card-body\">\n        <h4>{name}</h4>\n        <ul className=\"list-group list-group-flush\">\n          {children}\n        </ul>\n      </div>\n    </React.Fragment>\n  )\n}\n","import ItemDetails, { Record } from './item-details';\n\nexport default ItemDetails;\n\nexport { Record };","import React, { Component } from 'react';\n\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\n\nconst withData = (View) => {\n    return class extends Component {\n\n        state = {\n            data: null,\n            loading: true,\n            error: false\n        };\n\n        componentDidUpdate(prevProps) {\n            if (this.props.getData !== prevProps.getData) {\n                this.update()\n            }\n        }\n\n        componentDidMount() {\n            this.update()\n        }\n\n        update() {\n            this.setState({\n                loading: true,\n                error: false\n            })\n            this.props.getData()\n                .then((data) => {\n                    this.setState({\n                        data,\n                        loading: false\n                    });\n                })\n                .catch(() => {\n                    this.setState({\n                        error: true,\n                        loading: false \n                    })\n                })\n        }\n\n        render() {\n            const { data, loading, error } = this.state;\n\n            if (loading) {\n                return <Spinner />;\n            }\n            if(error) {\n                return <ErrorIndicator />\n            }\n\n            return <View {...this.props} data={data} />;\n        }\n    };\n};\n\nexport default withData;","import React from 'react';\n\nconst {\n    Provider : SwapiServiceProvider,\n    Consumer : SwapiServiceConsumer\n} = React.createContext();\n\nexport {\n    SwapiServiceProvider,\n    SwapiServiceConsumer\n};","import React from 'react';\nimport { SwapiServiceConsumer } from '../swapi-service-context';\n\nconst withSwapiService = (mapMethodsToProps) => (Wrapped) => {\n    return (props) => {\n        return (\n            <SwapiServiceConsumer>\n                {\n                    (swapiService) => {\n                        const serviceProps = mapMethodsToProps(swapiService)\n                        return (\n                            <Wrapped {...props} {...serviceProps} />\n                        )\n                    }\n                }\n            </SwapiServiceConsumer>\n        )\n    };\n};\n\nexport default withSwapiService;","const compose = (...funcs) => (comp) => {\n    return funcs.reduceRight((wrapped, f) => f(wrapped), comp);\n};\n\nexport default compose;","import React from 'react';\n\nconst withChildFunction = (fn) => (Wrapped) => {\n    return (props) => {\n        return (\n            <Wrapped {...props}>\n                {fn}\n            </Wrapped>\n        )\n    }\n}\n\nexport default withChildFunction;","import React from 'react';\n\nimport ItemDetails, { Record } from '../item-details';\nimport { withSwapiService } from '../hoc-helpers';\n\nconst PersonDetails = (props) => {\n    return (\n        <ItemDetails {...props}>\n            <Record field='gender' label='Gender' />\n            <Record field='eyeColor' label='Eye Color' />\n        </ItemDetails>\n    )\n};\n\nconst mapMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getPersone,\n        getImageUrl: swapiService.getPersonImage\n    }\n}\n\nexport default withSwapiService(mapMethodsToProps)(PersonDetails);","import React from 'react';\n\nimport ItemDetails, { Record } from '../item-details';\nimport { withSwapiService } from '../hoc-helpers';\n\nconst PlanetDetails = (props) => {\n\n    return (\n        <ItemDetails {...props}>\n            <Record field='population' label='Population' />\n            <Record field='rotationPeriod' label='Rotation Period' />\n            <Record field='diameter' label='Diameter' />\n        </ItemDetails>\n    )\n\n};\n\nconst mapMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getPlanet,\n        getImageUrl: swapiService.getPlanetImage\n    }\n}\n\nexport default withSwapiService(mapMethodsToProps)(PlanetDetails);","import React from 'react';\n\nimport ItemDetails, { Record } from '../item-details';\nimport { withSwapiService } from '../hoc-helpers';\n\nconst StarshipDetails = (props) => {\n\n    return (\n        <ItemDetails {...props}>\n            <Record field='model' label='Model' />\n            <Record field='length' label='Length' />\n            <Record field='costInCredits' label='Cost' />\n        </ItemDetails>\n    )\n};\n\nconst mapMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getStarship,\n        getImageUrl: swapiService.getStarshipImage\n    }\n}\n\nexport default withSwapiService(mapMethodsToProps)(StarshipDetails);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './item-list.css';\n\nconst ItemList = (props) => {\n\n  const { data, onItemSelected, children: renderLabel } = props\n\n  const items = data.map((item) => {\n    const { id } = item;\n    const label = renderLabel(item);\n    return (\n      <li className=\"list-group-item\"\n        key={id}\n        onClick={() => onItemSelected(id)}>\n        {label}\n      </li>\n    )\n  })\n\n  return (\n    <ul className=\"item-list list-group\">\n      {items}\n    </ul>\n  );\n};\n\nItemList.defaultProps = {\n  onItemSelected: () => {}\n}\n\nItemList.propTypes = {\n  onItemSelected: PropTypes.func,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  children: PropTypes.func.isRequired\n}\nexport default ItemList;\n","import ItemList from './item-list';\n\nexport default ItemList;","import React from 'react';\nimport ItemList from '../item-list';\nimport { withData, withSwapiService, withChildFunction, compose } from '../hoc-helpers';\n\n\nconst mapPersonMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllPeople\n    }\n}\n\nconst mapPlanetMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllPlanets\n    }\n}\n\nconst mapStarshipMethodsToProps = (swapiService) => {\n    return {\n        getData: swapiService.getAllStarships\n    }\n}\nconst renderName = ({ name }) => <span>{name}</span>\nconst renderModelAndName = ({ model, name }) => <span>{name} ({model})</span>\n\nconst PersonList = compose(\n    withSwapiService(mapPersonMethodsToProps),\n    withData,\n    withChildFunction(renderName)\n)(ItemList);\n\nconst PlanetList = compose(\n    withSwapiService(mapPlanetMethodsToProps),\n    withData,\n    withChildFunction(renderName)\n)(ItemList);\n\n\nconst StarshipList = compose(\n    withSwapiService(mapStarshipMethodsToProps),\n    withData,\n    withChildFunction(renderModelAndName)\n)(ItemList);\n\n\nexport {\n    PersonList,\n    PlanetList,\n    StarshipList\n};","import Row from './row';\n\nexport default Row;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './row.css';\n\nconst Row = ({ left, right }) => {\n  return (\n    <div className=\"row mb2\">\n      <div className=\"col-md-6\">\n        {left}\n      </div>\n      <div className=\"col-md-6\">\n        {right}\n      </div>\n    </div>\n  );\n};\n\nRow.propTypes = {\n  left: PropTypes.node,\n  right: PropTypes.node\n}\n\nexport default Row;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { PersonDetails, PersonList } from '../sw-components';\nimport Row from '../row';\n\nconst PeoplePage = ({ history, match }) => {\n  const { id } = match.params\n  return (\n    <Row\n      left={<PersonList onItemSelected={(itemId) => {\n        const newPath = `/people/${itemId}`;\n        return history.push(newPath)\n      }} />}\n      right={<PersonDetails itemId={id} />}\n    />\n  );\n}\n\nexport default withRouter(PeoplePage);","import React, { Component } from 'react';\nimport { PlanetDetails, PlanetList } from '../sw-components';\nimport Row from '../row';\n\nexport default class PlanetsPage extends Component {\n\n  state = {\n    selectedItem: null\n  };\n\n  onItemSelected = (selectedItem) => {\n    this.setState({ selectedItem });\n  };\n\n  render() {\n    const { selectedItem } = this.state;\n\n    return (\n      <Row\n        left={<PlanetList onItemSelected={this.onItemSelected} />}\n        right={<PlanetDetails itemId={selectedItem} />} />\n    );\n  }\n}","import React from 'react';\nimport { StarshipList } from '../sw-components';\nimport { withRouter } from 'react-router-dom';\n\nconst StarshipsPage = ({ history }) => {\n  return (\n    <StarshipList onItemSelected={(itemId) => {\n      // const newPath = `/starships/${itemId}`;\n      history.push(itemId)\n    }} />\n  );\n}\n\nexport default withRouter(StarshipsPage);\n\n// import React, { Component } from 'react';\n// import { StarshipDetails, StarshipList } from '../sw-components';\n// import Row from '../row';\n\n// export default class StarshipsPage extends Component {\n\n//   state = {\n//     selectedItem: null\n//   };\n\n//   onItemSelected = (selectedItem) => {\n//     this.setState({ selectedItem });\n//   };\n\n//   render() {\n//     const { selectedItem } = this.state;\n\n//     return (\n//       <Row\n//         left={<StarshipList onItemSelected={this.onItemSelected} />}\n//         right={<StarshipDetails itemId={selectedItem} />} />\n//     );\n//   }\n// }","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst LoginPage = ({ isLoggedIn, onLogin }) => {\n\n  if (isLoggedIn) {\n    return <Redirect to=\"/\"/>;\n  }\n\n  return (\n    <div className=\"jumbotron\">\n      <p>Login to see secret page!</p>\n      <button\n        className=\"btn btn-primary\"\n        onClick={onLogin}>\n        Login\n      </button>\n    </div>\n  );\n};\n\nexport default LoginPage;","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst SecretPage = ({ isLoggedIn }) => {\n\n  if (isLoggedIn) {\n    return (\n      <div className=\"jumbotron text-center\">\n        <h3>This page is full of secrets!!!</h3>\n      </div>\n    );\n  }\n\n  return <Redirect to=\"/login\" />;\n\n};\n\nexport default SecretPage;\n","import ErrorBoundry from './error-boundry';\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nimport ErrorIndicator from '../error-indicator/error-indicator';\n\nexport default class ErrorBoundry extends Component {\n\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch() {\n    this.setState({\n      hasError: true\n    });\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <ErrorIndicator />\n    }\n\n    return this.props.children;\n  }\n}","import App from './app';\n\nexport default App;","import React, { Component } from 'react';\n\nimport Header from '../header';\nimport RandomPlanet from '../random-planet';\nimport ErrorIndicator from '../error-indicator'\nimport SwapiService from '../../services/swapi-services';\nimport DummySwapiService from '../../services/dummy-swapi-service';\nimport {\n  PeoplePage,\n  StarshipsPage,\n  PlanetsPage,\n  LoginPage,\n  SecretPage\n} from '../pages';\nimport ErrorBoundry from '../error-boundry';\n\nimport './app.css';\n\nimport { SwapiServiceProvider } from '../swapi-service-context';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { StarshipDetails } from '../sw-components';\n\n\nexport default class App extends Component {\n\n\n  state = {\n    hasError: false,\n    swapiService: new SwapiService(),\n    isLoggedIn: false\n  }\n\n  onLogin = () => {\n    this.setState({\n      isLoggedIn: true\n    })\n  }\n\n  onServiceChange = () => {\n    this.setState(({ swapiService }) => {\n      const Service = swapiService instanceof SwapiService ? DummySwapiService : SwapiService\n      console.log('Switched to', Service.name);\n      return {\n        swapiService: new Service()\n      }\n    })\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n\n    const { isLoggedIn } = this.state\n\n    if (this.state.hasError) {\n      return <ErrorIndicator />\n    }\n\n    return (\n      <ErrorBoundry>\n        <SwapiServiceProvider value={this.state.swapiService}>\n          <Router>\n\n            <div className=\"stardb-app\">\n              <Header onServiceChange={this.onServiceChange} />\n              <RandomPlanet />\n              <Switch>\n                <Route path=\"/\"\n                  render={() => <h2>Welcome t o StarDB</h2>}\n                  exact />\n                <Route path=\"/people/:id?\" component={PeoplePage} />\n                <Route path=\"/planets\" component={PlanetsPage} />\n                <Route path=\"/starships\" exact component={StarshipsPage} />\n                <Route path=\"/starships/:id\"\n                  render={({ match }) => {\n                    const { id } = match.params;\n                    return <StarshipDetails itemId={id} />\n                  }}\n                />\n                <Route path=\"/login\"\n                  render={() => <LoginPage\n                    isLoggedIn={isLoggedIn}\n                    onLogin={this.onLogin} />}\n                />\n                <Route path=\"/secret\"\n                  render={() => <SecretPage\n                    isLoggedIn={isLoggedIn} />}\n                />\n                <Route render={() => <h2>Page not found</h2>} />\n              </Switch>\n            </div>\n\n          </Router>\n\n        </SwapiServiceProvider>\n      </ErrorBoundry>\n    );\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(<App />,\n  document.getElementById('root'));"],"sourceRoot":""}